data_train = slice(data_train, train),
data_test = slice(data_train, val)) %>%
mutate(fold = j, n.val) # add fold number and number in validation)
}
RESULTS = bind_rows(results)
RESULTS %>%
mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse.test)) +
geom_line(aes(color=fold)) +
geom_point(data=. %>% group_by(fold) %>% slice_min(mse.test, n=1), color="blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse.test = mean(mse.test)), linewidth=2) +
geom_point(data = . %>% group_by(k) %>% summarize(mse.test = mean(mse.test)) %>%
slice_min(mse.test, n=1), size=3, color="red") +
scale_x_continuous(breaks = seq(0, 40, by=1)) +
theme_bw()
RESULTS %>%
mutate(fold = factor(fold)) %>%
ggplot(aes(edf, mse.test)) +
geom_line(aes(color=fold)) +
geom_point(data=. %>% group_by(fold) %>% slice_min(mse.test, n=1), color="blue") +
geom_line(data = . %>% group_by(edf) %>% summarize(mse.test = mean(mse.test)), linewidth=2) +
geom_point(data = . %>% group_by(edf) %>% summarize(mse.test = mean(mse.test)) %>%
slice_min(mse.test, n=1), size=3, color="red") +
scale_x_continuous(breaks = seq(0, 40, by=1)) +
theme_bw()
RESULTS %>%
mutate(fold = factor(fold)) %>%
ggplot(aes(k, mse.test)) +
geom_line(aes(color=fold)) +
geom_point(data=. %>% group_by(fold) %>% slice_min(mse.test, n=1), color="blue") +
geom_line(data = . %>% group_by(k) %>% summarize(mse.test = mean(mse.test)), linewidth=2) +
geom_point(data = . %>% group_by(k) %>% summarize(mse.test = mean(mse.test)) %>%
slice_min(mse.test, n=1), size=3, color="red") +
scale_x_continuous(breaks = seq(0, 40, by=1)) +
theme_bw()
set.seed(223)
n=50000
x = x_vals(n)
y = y_vals(x)
data_test = tibble(x=x, y=y)
k = seq(3,40,1)
RESULTS2 = map_df(k, knn_eval, data_train = data_train, data_test = data_test)
RESULTS2
#: Plot Results
RESULTS2 %>%
# make long:
pivot_longer(starts_with("mse"), names_to="data", values_to="mse") %>%
# remove 'mse.' from values:
mutate(data = str_remove(data, "mse\\.")) %>%
# plot:
ggplot(aes(edf, mse, color=data))+
geom_line()+
geom_point()+
labs(title="kNN Regression", x='edf (n/k)', y="MSE")+
scale_x_continuous(breaks=seq(2, 30, by=2))+
theme_bw()
RESULTS2 %>%
filter(mse.test==min(mse.test))
ggplot()+
geom_line(data = RESULTS %>% group_by(k) %>% summarize(mse.test = mean(mse.test)),
aes(k, mse.test),
color="darkblue")+
geom_point(data = RESULTS %>% group_by(k) %>% summarize(mse.test = mean(mse.test)) %>%
slice_min(mse.test, n=1), aes(k, mse.test), size=3, color="red")+
geom_line(data = RESULTS2, aes(k, mse.test), color="orange", linetype="longdash")+
geom_point(data = RESULTS2 %>% filter(mse.test==min(mse.test)), aes(k, mse.test), size=3, color="red")+
scale_x_continuous(breaks=seq(2, 40, by=2))+
annotate ("text",x = 35,y = 7,label = "Orange: True Error\n Blue: CV Error")+
theme_bw()
ggplot()+
geom_line(data = RESULTS %>% group_by(edf) %>% summarize(mse.test = mean(mse.test)),
aes(edf, mse.test),
color="darkblue")+
geom_point(data = RESULTS %>% group_by(edf) %>% summarize(mse.test = mean(mse.test)) %>%
slice_min(mse.test, n=1), aes(edf, mse.test), size=3, color="red")+
geom_line(data = RESULTS2, aes(edf, mse.test), color="orange", linetype="longdash")+
geom_point(data = RESULTS2 %>% filter(mse.test==min(mse.test)), aes(edf, mse.test), size=3, color="red")+
scale_x_continuous(breaks=seq(2, 40, by=2))+
annotate ("text",x = 30,y = 7,label = "Orange: True Error\n Blue: CV Error")+
theme_bw()
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
data.dir = 'https://mdporter.github.io/DS6030/data/' # data directory
library(ks)        # functions for KDE
library(tidyverse) # functions for data manipulation
set.seed(2019)
n = 283
sd = 2.1
x = sqrt(rnorm(n, sd=sd)^2 + rnorm(n, sd=sd)^2)
dat = readr::write_csv(tibble(x), "C:/Users/jacqu/OneDrive/Documents/MSDS/datasets/geo_profile.csv", col_names=FALSE)
#hist(x, 15)
sum_X = 0
for (i in x){
sum_x = sum_x + x[i]^2
}
sum_x = 0
for (i in x){
sum_x = sum_x + x[i]^2
}
sum_x
sum_x = 0
for (i in length(dat)){
sum_x = sum_x + dat[i,]^2
}
sum_x
theta = sum_x/(2*n)
theta
set.seed(2019)
n = 283
sd = 2.1
x = sqrt(rnorm(n, sd=sd)^2 + rnorm(n, sd=sd)^2)
dat = readr::write_csv(tibble(x), "C:/Users/jacqu/OneDrive/Documents/MSDS/datasets/geo_profile.csv", col_names=FALSE)
hist(x, 15)
sum_x = 0
for (i in length(x)){
sum_x = sum_x + x[i]^2
}
sum_x
theta = sum_x/(2*n)
theta
ys = list()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys[[length(ys)+1]] = y
}
hist(ys, 8)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
append(ys, y)
}
hist(ys, 8)
ds = c()
class(ds)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
c(y, ys)
}
hist(ys, 8)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = c(y, ys)
}
hist(ys, 8)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = c(ys, y)
}
hist(ys, 8)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = append(ys, y)
}
hist(ys, 8)
View(y)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = c(ys, y)
}
hist(ys, 8)
View(ys)
ys[1]
ys[12]
ys = data.frame()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = c(ys, y)
}
hist(ys, 8)
View(dat)
View(dat)
ys = data.frame()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
new_row = c(x=y)
ys = rbind(ys,new_row)
}
hist(ys, 8)
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
data.dir = 'https://mdporter.github.io/DS6030/data/' # data directory
library(ks)        # functions for KDE
library(tidyverse) # functions for data manipulation
set.seed(2019)
n = 283
sd = 2.1
x = sqrt(rnorm(n, sd=sd)^2 + rnorm(n, sd=sd)^2)
dat = readr::write_csv(tibble(x), "C:/Users/jacqu/OneDrive/Documents/MSDS/datasets/geo_profile.csv", col_names=FALSE)
hist(x, 15)
sum_x = 0
for (i in length(x)){
sum_x = sum_x + x[i]^2
}
sum_x
theta = sum_x/(2*n)
theta
ys = data.frame()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
new_row = c(x=y)
ys = rbind(ys,new_row)
}
hist(ys, 8)
ys = c()
for (i in length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
print(y)
ys = c(ys, y)
}
print(ys)
ys = c()
for (i in 1:length(dat)){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
print(y)
ys = c(ys, y)
}
print(ys)
ys = c()
for (i in 1:n){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
print(y)
ys = c(ys, y)
}
print(ys)
ys = c()
for (i in 1:n){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = c(ys, y)
}
View(ys)
hist(ys, 8)
hist(as.numeric(ys), 8)
sum_x = 0
for (i in 1:n){
sum_x = sum_x + x[i]^2
}
sum_x
theta = sum_x/(2*n)
theta
ys = c()
for (i in 1:n){
y = (dat[i,]/theta)*exp(-(dat[i,]^2)/(2*theta))
ys = c(ys, y)
}
hist(as.numeric(ys), 8)
View(ys)
View(ys)
# Calculate the PDF using the MLE value for each x value
pdf = dnorm(x, mean = 0, sd = theta)  # Adjust the mean as needed
# Plot the estimated density
plot(x, pdf, type = "l", xlab = "X Values", ylab = "PDF", main = "Estimated Density Plot")
grid()
# Calculate the PDF using the MLE value for each x value
pdf = c()
for (i in 1:n){
pdf_val = (x[i]/theta)*exp(-x[i]^2/(2*theta))
pdf = c(pdf, pdf_val)
}
# Plot the estimated density
plot(x, pdf, type = "l", xlab = "X Values", ylab = "PDF", main = "Estimated Density Plot")
grid()
# Calculate the PDF using the MLE value for each x value
pdf = c()
for (i in 1:n){
pdf_val = (x[i]/theta)*exp(-x[i]^2/(2*theta))
pdf = c(pdf, pdf_val)
}
# Plot the estimated density
hist(pdf)
sum_x = 0
for (i in 1:n){
sum_x = sum_x + dat[i,]^2
}
sum_x
theta = sum_x/(2*n)
theta
library(fitdistrplus)
norm_fit = fitdist(data=dat$x, distr="norm", method="mle")
(nb.pars = coef(norm_fit))
library(fitdistrplus)
opt = fitdist(data=dat$x, distr="norm", method="mle")
gauss.pars = opt$estimate
library(fitdistrplus)
opt = fitdist(data=dat$x, distr="norm", method="mle")
gauss.pars = opt$estimate
gauss.pars
dat2 = read.csv("C:/Users/jacqu/Downloads/crashes16.csv")
View(dat2)
plot(dat2$mile, dat2$time)
f2 = kde(dat2$mile, h=bw/3)
bw = 5
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 2
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 10
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
x2 = sqrt(rnorm(n, sd=theta)^2 + rnorm(n, sd=theta)^2)
theta = sum_x/(2*n)
theta
x2 = sqrt(rnorm(n, sd=theta)^2 + rnorm(n, sd=theta)^2)
x2 = sqrt(rnorm(n, sd=theta)^2 + rnorm(n, sd=theta)^2)
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
data.dir = 'https://mdporter.github.io/DS6030/data/' # data directory
library(ks)        # functions for KDE
library(tidyverse) # functions for data manipulation
set.seed(2019)
n = 283
sd = 2.1
x = sqrt(rnorm(n, sd=sd)^2 + rnorm(n, sd=sd)^2)
dat = readr::write_csv(tibble(x), "C:/Users/jacqu/OneDrive/Documents/MSDS/datasets/geo_profile.csv", col_names=FALSE)
hist(x, 15)
set.seed(2019)
n = 283
sd = 2.1
x = sqrt(rnorm(n, sd=sd)^2 + rnorm(n, sd=sd)^2)
dat = readr::write_csv(tibble(x), "C:/Users/jacqu/OneDrive/Documents/MSDS/datasets/geo_profile.csv", col_names=FALSE)
#hist(x, 15)
sum_x = 0
for (i in 1:n){
sum_x = sum_x + dat[i,]^2
}
theta = sum_x/(2*n)
theta
x2 = sqrt(rnorm(n, sd=theta)^2 + rnorm(n, sd=theta)^2)
x2 = sqrt(rnorm(n, sd=4.524)^2 + rnorm(n, sd=4.524)^2)
hist(x2, 8)
bw = 5
f2 = kde(dat2$mile, h=bw/3)
dat2 = read.csv("C:/Users/jacqu/Downloads/crashes16.csv")
plot(dat2$mile, dat2$time)
bw = 5
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 5
f3 = kde(dat2$time, h=bw/3)
plot(f3)
bw = 10
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 15
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 20
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 25
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 2
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
hist(f2)
bw = 2
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 10
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 20
f2 = kde(dat2$mile, h=bw/3)
plot(f2)
bw = 10
f3 = kde(dat2$time, h=bw/3)
plot(f3)
f4 = kde(x=dat2)
plot(f4)
f4 = kde(x=dat2)
plot(f4, display="filled.contour")
f4 = kde(x=dat2)
plot(f4, display="filled.contour", h=c(20/3,10,3))
f4 = kde(x=dat2)
plot(f4, display="filled.contour", h=hscv(dat2))
hscv(dat2)
dat2$h
f4 = kde(x=dat2)
plot(f4, display="filled.contour")
x = seq(0,8,length.out=n)
for (i in 1:n){
(x[i] / theta) * exp(-x[i]^2/(2*theta))
}
hist(x)
x = seq(0,8,length.out=100)
for (i in 1:length(x)){
(x[i] / theta) * exp(-x[i]^2/(2*theta))
}
hist(x)
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
hist(x)
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
hist(x, pdf)
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
plot(x, pdf)
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
line(x, pdf)
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
plot(x, pdf, type=1)
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
plot(x, pdf, type="1")
pdf = c()
x = seq(0,8,length.out=n)
for (i in 1:n){
pt = (x[i] / theta) * exp(-x[i]^2/(2*theta))
pdf = append(pdf, pt)
}
plot(x, pdf, type="l")
bw = 5
f = kde(pdf, h=bw/3)
bw = 5
f = kde(as.data.frame(pdf), h=bw/3)
bw = 5
f = kde(as.dataframe(pdf), h=bw/3)
as.dataframe(pdf)
as.data.frame(pdf)
as.data.frame(x=pdf)
data.frame(pdf)
data.frame(rows=pdf)
bw = 5
f = kde(x, h=bw/3)
plot(f)
bw = 10
f = kde(x, h=bw/3)
plot(f)
plot(dat$X)
hist(dat$X)
View(dat)
hist(dat$x)
hist(dat$x)
plot(x, pdf, type="l")
hist(dat$x)
line(x, pdf, type="l")
hist(dat$x)
lines(x, pdf, type="l")
hist(dat$x)
lines(x, pdf)
hist(x, pdf)
plot(f)
lines(x, pdf)
#: Predict function
# the ks package includes a predict() function to help make predictions
X.eval = expand.grid(miles = seq(min(dat2$mile), max(dat2$mile), length=100),
times = seq(min(dat2$time), max(dat2$time), length=100))
X.eval %>% mutate(fhat = predict(f4, x = .)) %>%
ggplot(aes(mile, time)) +
geom_contour_filled(aes(z=fhat)) + # or unfilled with geom_contour()
geom_point(data=dat2, color="white")
#: Predict function
# the ks package includes a predict() function to help make predictions
X.eval = expand.grid(miles = seq(min(dat2$mile), max(dat2$mile), length=100),
times = seq(min(dat2$time), max(dat2$time), length=100))
X.eval %>% mutate(fhat = predict(f4, x = .))
#: Predict function
# the ks package includes a predict() function to help make predictions
X.eval = expand.grid(miles = seq(min(dat2$mile), max(dat2$mile), length=100),
times = seq(min(dat2$time), max(dat2$time), length=100))
X.eval %>%
mutate(fhat = predict(f4, x = .)) %>%
arrange(fhat)
#: Predict function
# the ks package includes a predict() function to help make predictions
X.eval = expand.grid(miles = seq(min(dat2$mile), max(dat2$mile), length=100),
times = seq(min(dat2$time), max(dat2$time), length=100))
X.eval %>%
mutate(fhat = predict(f4, x = .)) %>%
arrange(desc(fhat))
f4 = kde(x=dat2)
plot(f4, cont = c(10, 50, 95), display="filled.contour")
f4 = kde(x=dat2)
plot(f4, cont = c(25, 50, 95), display="filled.contour")
f4 = kde(x=dat2)
plot(f4, cont = c(25, 50, 99), display="filled.contour")
